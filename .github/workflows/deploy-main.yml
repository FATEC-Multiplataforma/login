name: Fretec Deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Instalar dependências
        run: mvn install -Dmaven.test.skip=true

      - name: Rodar OWASP Dependency-Check
        continue-on-error: true
        run: |
          cd login/springframework
          mvn org.owasp:dependency-check-maven:check \
            -DfailBuildOnCVSS=7 \
            -Dformat=ALL \
            -Danalyzer.ossindex.enabled=false || echo "OWASP scan failed" > owasp-failure.flag

      - name: Upload relatório se houver vulnerabilidades
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: relatorio-springframework
          path: |
            login/springframework/target/dependency-check-report.*
            login/springframework/owasp-failure.flag

      - name: Falhar o job se houver vulnerabilidades
        if: always()
        run: |
          if [ -f login/springframework/owasp-failure.flag ]; then
            echo "Vulnerabilidades encontradas. Falhando o job."
            exit 1
          fi


#  quality:
#    name: Quality
#    runs-on: ubuntu-latest
#    needs: security
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#        with:
#          fetch-depth: 0
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'zulu'
#
#      - name: Cache Maven packages
#        uses: actions/cache@v3
#        with:
#          path: ~/.m2/repository
#          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
#          restore-keys: ${{ runner.os }}-maven
#
#      - name: Build with Maven
#        run: mvn clean verify
#
#      - name: List generated files
#        run: ls -l target/jacoco-report/
#
#      - name: SonarCloud Scan
#        env:
#          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#        run: |
#          mvn sonar:sonar \
#            -Dsonar.projectKey=FATEC-Multiplataforma_login \
#            -Dsonar.organization=FATEC-Multiplataforma \
#            -Dsonar.host.url=https://sonarcloud.io \
#            -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
#            -Dsonar.branch.name=main \
#            -Dsonar.coverage.jacoco.xmlReportPaths=target/jacoco-report/jacoco.xml

#      - name: Check SonarQube results
#        run: |
#          SONAR_URL="https://sonarcloud.io/api/measures/component?componentKey=cisp-it_iam-management&branch=main"
#
#          CODE_SMELL=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=code_smells" | jq -r '.component.measures[0].value')
#          if [ "$CODE_SMELL" -gt 10 ]; then
#            echo "Aplicação com mais de 10 code small."
#            exit 1
#          fi
#          DUPLICATED=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=duplicated_lines_density" | jq -r '.component.measures[0].value')
#          if (( $(echo "$DUPLICATED > 14.0" | bc -l) )); then
#            echo "Aplicação com mais de 3% de duplicação de código."
#            exit 1
#          fi
#          NUM_BUGS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=bugs" | jq -r '.component.measures[0].value')
#          if [ "$NUM_BUGS" -gt 2 ]; then
#            echo "Aplicação contem mais de 2 bugs."
#            exit 1
#          fi
#          COVER=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=coverage" | jq -r '.component.measures[0].value')
#          if (( $(echo "$COVER < 80.0" | bc -l) )); then
#            echo "Aplicação com menos de 80% de coverage."
#            exit 1
#          fi


#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Verificar Versao
#        uses: actions/checkout@v5
#
#      - name: Setup Java
#        uses: actions/setup-java@v2
#        with:
#          distribution: 'temurin'
#          java-version: 17
#
#      - name: Download Wrapper
#        run: mvn -N io.takari:maven:wrapper -Dmaven=3.9.9
#
#      - name: Build Projeto
#        run: mvn clean install -Dmaven.test.skip
#
#      - name: Dockerhub Integration
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build Imagem
#        run: docker build -t mrspock182/login:latest .
#
#      - name: Deploy Dockerhub
#        run: docker push mrspock182/login:latest